<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wyb20181.github.io/</id>
    <title>Gridea</title>
    <updated>2020-01-07T12:09:04.761Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wyb20181.github.io/"/>
    <link rel="self" href="https://wyb20181.github.io//atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://wyb20181.github.io//images/avatar.png</logo>
    <icon>https://wyb20181.github.io//favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[android四大组件之Activity]]></title>
        <id>https://wyb20181.github.io//post/android-si-da-zu-jian-zhi-activity</id>
        <link href="https://wyb20181.github.io//post/android-si-da-zu-jian-zhi-activity">
        </link>
        <updated>2020-01-07T12:03:17.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://wyb20181.github.io//post-images/1578398758913.png" alt=""></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[android app 私有文件夹(/date/data/app packagename/)下的文件读写]]></title>
        <id>https://wyb20181.github.io//post/android-app-si-you-wen-jian-jia-datedataapp-packagenamexia-de-wen-jian-du-xie</id>
        <link href="https://wyb20181.github.io//post/android-app-si-you-wen-jian-jia-datedataapp-packagenamexia-de-wen-jian-du-xie">
        </link>
        <updated>2020-01-07T11:43:22.000Z</updated>
        <content type="html"><![CDATA[<p>每一个Android程序都有一个特有的，只能由本程序自己访问的私有目录，这个目录一般位于/data/data/<Package Name>/目录下。所有应用程序私有目录中保存的文件在用户卸载该应用的时候，都会被自动删除掉。</p>
<p>在Android应用程序开发中，经常使用的一些系统提供的API，会在这个私有目录中创建一些子目录，并将相应的数据存放于其中。而这些对于应用程序开发者来说，完全是透明的，本文将对所有会访问应用程序私有目录的API及其行为做一个简单的总结。</p>
<p>程序私有目录下，一般会有下面几个子目录，它们的用处和涉及到的API（多半继承自Context类）如下：</p>
<p>一、files目录</p>
<p>这个目录是用来存放应用程序自己在安装过后创建的文件的地方。有下面几个API都会涉及对这个目录的操作：</p>
<p>File Context.getFilesDir();<br>
该方法返回指向/data/data/<Package Name>/files/目录的一个File对象。</p>
<p>FileInputStream Context.openFileInput(String name);<br>
该方法将在/data/data/<Package Name>/files/目录下打开一个指定名字的文件，这个文件只能用来读取，不能用来写入。函数将返回一个FileInputStream类的实例。</p>
<p>FileOutputStream Context.openFileOutput(String name, int mode);<br>
该方法将在/data/data/<Package Name>/files/目录下打开一个指定名字的文件，这个文件可以用来写入。如果这个文件不存在，会新创建一个。函数将返回一个FileOutputStream类的实例。</p>
<p>这个函数的参数除了文件名之外，还有一个所谓的模式（mode）。它主要用来指定创建文件的读写权限以及当文件已经存在时，如何写入文件。主要有下面几个值：</p>
<p>1）  MODE_PRIVATE（0x00000000），表示创建的文件只能被本程序或者共享同一用户ID的其它应用程序访问到，别的程序既没有权限读也没有权限写，这个是默认模式；</p>
<p>2）  MODE_WORLD_READABLE（0x00000001），表示创建的文件可以被任何程序读，但是不能修改；</p>
<p>3）  MODE_WORLD_WRITABLE（0x00000002），表示任何程序都可以修改创建文件的内容，出于对安全方面的考虑，从Android 4.2.2（API Level 17）开始，这种模式已经被舍弃了；</p>
<p>4）  MODE_APPEND（0x00008000），表示如果要写入的文件已经存在了，则将写入的内容追加到文件末尾，而不是覆盖原来的内容。</p>
<p>如果想联合使用以上的多个模式，可以用“+”将它们联接起来。</p>
<p>如果想查看/data/data/<Package Name>/files/目录下到底有哪些文件，可以用下面的函数：</p>
<p>String[] Context.fileList();<br>
该函数将返回包含/data/data/<Package Name>/files/目录下所有现存文件文件名的字符串数组。</p>
<p>如果想删除一个在/data/data/<Package Name>/files/目录下的文件，可以用下面的函数：</p>
<p>boolean Context.deleteFile(String name);<br>
如果指定名字的文件被删除成功将返回true，反之返回false。</p>
<p>二、cache目录</p>
<p>这个目录是默认用来给应用程序做数据缓存的，在程序中可以通过下面的API获得这个目录的路径：</p>
<p>File Context.getCacheDir();<br>
该方法返回指向/data/data/<Package Name>/cache/目录的一个File对象。</p>
<p>当内部存储空间变得紧张的时候，存于该目录下的所有文件都有可能被Android系统自动删除掉。</p>
<p>三、databases目录</p>
<p>该目录主要用来存放应用程序自己创建或使用的SQL Lite数据库文件。有下面几个API都会涉及对这个目录的操作：</p>
<p>SQLiteDatabase Context.openOrCreateDatabase(String name, int mode, CursorFactory factory);<br>
该函数将在/data/data/<Package Name>/databases/目录下，查找指定名字的数据库文件，如果没有的话，会创建一个新的。创建数据库的时候，也需要指定模式，有如下几种：</p>
<p>1）MODE_PRIVATE（0x00000000），作用和前面介绍的相同；</p>
<p>2）MODE_WORLD_READABLE（0x00000001），作用和前面介绍的相同；</p>
<p>3）MODE_WORLD_WRITABLE（0x00000002），作用和前面介绍的相同；</p>
<p>4）MODE_ENABLE_WRITE_AHEAD_LOGGING（0x00000008），这个模式是从Android3.0（API Level 11）开始加入进来的。将打开数据库的预写日志功能，提高数据的可靠性。</p>
<p>同时，从Android 4.0（API Level 15）开始，还提供了一个android.database.sqlite.SQLiteOpenHelper抽象类来帮助操作SQL Lite数据库。一般用法是自己实现一个类，并继承自SQLiteOpenHelper类，重载onCreate（数据库第一次被创建）、onUpgrade（数据库升级）和onOpen（数据库被打开）方法，加入自己的逻辑。接着构造出一个你自己实现类的实例，并调用下面的函数，打开或创建出数据库：</p>
<p>SQLiteDatabase SQLiteOpenHelper.getReadableDatabase();<br>
SQLiteDatabase SQLiteOpenHelper.getWritableDatabase();<br>
前面的函数获得的数据库只能用来读，而后面的函数获得的数据库既可以读也可以写。</p>
<p>其实，这个帮助类最终也是通过调用了前面的Context. openOrCreateDatabase函数来打开或创建数据库，并且是使用默认的MODE_PRIVATE模式。因此，通过SQLiteOpenHelper类，最终也是在/data/data/<Package Name>/databases/目录下创建了数据库文件，并且别的程序不能访问到。</p>
<p>File Context.getDatabasePath(String name);<br>
该方法将返回一个指向指定数据库文件的File对象。</p>
<p>如果想查看/data/data/<Package Name>/ databases/目录下到底有哪些数据库，可以用下面的函数：</p>
<p>String[] Context.databaseList();<br>
该函数将返回包含/data/data/<Package Name>/databases/目录下所有数据库名的字符串数组。</p>
<p>如果想删除一个在/data/data/<Package Name>/databases/目录下的数据库，可以用下面的函数：</p>
<p>boolean Context.deleteDatabase(String name);<br>
如果指定名字的数据库文件被删除成功将返回true，反之返回false。</p>
<p>四、shared_prefs目录</p>
<p>该目录主要用来存放应用程序自己创建或使用的一些常用配置文件（Shared Preference）。</p>
<p>程序中主要是用下面的函数来获取一个配置文件：</p>
<p>SharedPreferences Context.getSharedPreferences(String name, int mode);<br>
函数的第一个参数是配置文件的名字，函数调用成功之后会在/data/data/<Package Name>/shared_prefs/目录下创建一个名字为<name>.xml的文件。</p>
<p>函数的第二个参数是创建的模式，有下面几个值：</p>
<p>1）MODE_PRIVATE（0x00000000），作用和前面介绍的相同；</p>
<p>2）MODE_WORLD_READABLE（0x00000001），作用和前面介绍的相同；</p>
<p>3）MODE_WORLD_WRITABLE（0x00000002），作用和前面介绍的相同；</p>
<p>4）MODE_MULTI_PROCESS（0x00000004），如果你的应用程序有多个进程，并且都需要操作同一个配置文件的话，出于数据同步方面的考虑，在每次修改之前都需要检查一下这个配置文件是否已经被别的进程修改了。</p>
<p>五、lib目录</p>
<p>这个子目录存放着的是应用程序需要使用的Native原生程序，即JNI调用需要加载的.so文件。</p>
<p>这些文件一般是位于apk安装包里的lib目录下。在程序安装的时候，系统会将所有apk文件中lib目录下的所有原生程序拷贝到这个子目录下。</p>
<p>该目录是程序不能操作的，不能在程序运行时，向该目录拷贝.so文件，然后再通过调用System.loadLibrary函数将其加载进来。</p>
<p>六、自定义目录</p>
<p>当然，程序也可以在自己的私有目录中创建任意名字的子目录：</p>
<p>File Context.getDir(String name, int mode);<br>
该方法返回指向/data/data/<Package Name>/下指定名称的文件夹的一个File对象。如果该文件夹不存在则用指定名称创建一个新的文件夹。</p>
<p>该目录下还有一些其它的目录，如app_sslcache、app_webview等，这些都是有Android系统中的某些特殊模块自动创建的，一般可以通过其名字猜到是由哪个模块创建的。</p>
<p>例子：</p>
<p>在files目录下创建文件夹111和文件aaa：</p>
<p>int myProcessID = Process.myPid();//import android.os.Process<br>
File filepath = MainActivity.this.getFilesDir();//this.getCacheDir();<br>
String filepathstr = filepath.toString();<br>
Log.d(TAG, &quot;filepathstr= &quot;+filepath.toString());//打印的是：filepathstr= /data/user/0/com.example.myapplication/files<br>
//创建文件夹 111<br>
File f = new File(filepathstr, &quot;111&quot;);<br>
Log.d(TAG, &quot;fpathstr= &quot;+f.toString());//fpathstr= /data/user/0/com.example.myapplication/files/111<br>
Log.d(TAG, &quot;f.getAbsolutePath= &quot;+f.getAbsolutePath());//f.getAbsolutePath= /data/user/0/com.example.myapplication/files/111<br>
//以上两个方法获取的path是一样的<br>
try {<br>
Log.d(TAG, &quot;f.getAbsolutePath= &quot;+f.getCanonicalPath());<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
}<br>
if(!f.exists()){<br>
Log.e(TAG, &quot;onCreate: !f.exists()&quot;);<br>
f.mkdirs();//创建文件夹<br>
}<br>
else if(f.exists()) {<br>
Log.e(TAG, &quot;onCreate: f.exists()&quot;);<br>
}<br>
//创建文件 aaa<br>
File f2 = new File(filepathstr, &quot;aaa&quot;);<br>
try {<br>
f2.createNewFile();//创建文件<br>
//file.mkdirs();<br>
Log.d(TAG, &quot;onClick: file.createNewFile()&quot;);<br>
} catch (IOException e) {<br>
// TODO Auto-generated catch block<br>
e.printStackTrace();<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[android  res/raw和assets的区别]]></title>
        <id>https://wyb20181.github.io//post/android-resraw-he-assets-de-qu-bie</id>
        <link href="https://wyb20181.github.io//post/android-resraw-he-assets-de-qu-bie">
        </link>
        <updated>2020-01-07T11:37:08.000Z</updated>
        <content type="html"><![CDATA[<p>*res/raw和assets的不同点：<br>
1.res/raw中的文件会被映射到R.java文件中，访问的时候直接使用资源ID即R.id.filename；<br>
assets文件夹下的文件不会被映射到R.java中，访问的时候需要AssetManager类。</p>
<p>2.res/raw不可以有目录结构，而assets则可以有目录结构，也就是assets目录下可以再建立文件夹</p>
<p>3.在AssertManager中不能处理单个超过1MB的文件，不然会报异常，raw没这个限制</p>
<p>*读取文件资源：<br>
1.读取res/raw下的文件资源，通过以下方式获取输入流来进行写操作</p>
<p>InputStream is = getResources().openRawResource(R.id.filename);</p>
<p>2.读取assets下的文件资源，通过以下方式获取输入流来进行写操作</p>
<p>AssetManager am = null;<br>
am = getAssets();<br>
InputStream is = am.open(&quot;filename&quot;);<br>
　（2）如果用Videoview来播放：</p>
<p>VideoView.setVideoUri(Uri.parse(&quot;android.resource://&quot; + getpackageName() + &quot;/&quot; + R.raw.movie));</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[android   dp px sp的区别]]></title>
        <id>https://wyb20181.github.io//post/android-dp-px-sp</id>
        <link href="https://wyb20181.github.io//post/android-dp-px-sp">
        </link>
        <updated>2020-01-07T10:39:38.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://wyb20181.github.io//post-images/1578393622765.png" alt=""></figure>
<p>“in”<br>
inches的缩写，英寸。就是屏幕的物理长度单位。一英寸等于2.54cm。比如Android手机常见的尺寸有5寸、5.5寸、6寸等，这里的长度都是指手机对角线的长度。</p>
<p>pt<br>
“points” 的缩写，点。一个点等于1/72英寸，所以“点”也是个长度单位而已。</p>
<p>px<br>
“pixel” 的缩写，像素。是画面显示的基本单位，真实的像素并不是点或者方块（虽然有时这样显示），也没有实际固定长度，只是一个抽象的取样。设计中的像素和实际显示屏上的像素相对应。</p>
<p>dpi<br>
&quot;dots per inch&quot; 的缩写，“每英寸的像素数”，即像素密度。下图展示了600 dpi和1200 dpi的对比，明显后者的像素更加密集。</p>
<p>sp: Scale-independent Pixel，即与缩放无关的抽象像素。sp和dp很类似但唯一的区别是，Android系统允许用户自定义文字尺寸大小（小、正常、大、超大等等），当文字尺寸是“正常”时，1sp=1dp=0.00625英寸，而当文字尺寸是“大”或“超大”时，1sp&gt;1dp=0.00625英寸。类似我们在windows里调整字体尺寸以后的效果——窗口大小不变，只有文字大小改变。</p>
<p>dip (dp)<br>
Density Independent Pixels 密度无关像素</p>
<p>安卓手机种类多样，有各种屏幕像素密度。比如120dpi是低密度（ldpi）类型，160dpi 是中密度（mdpi），240dpi是高密度（hdpi)，320dpi是超高密度（xhdpi），480dpi是超超高密度（xxhdpi）。</p>
<p>px= dp *（dpi/160）  可以看出px正比于dp和dpi(密度),当dpi屏幕密度相同屏幕尺寸较大其比例看起来就会较小。针对这种情况google为我们提供了一个百分比布局兼容库：Android Percent Support Library，解决了上述的问题，目前它支持RelativeLayout和FrameLayout的百分比布局，不过已经有大牛在GitHub上面开源了LinearLayout的百分比布局支持库。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://wyb20181.github.io//post/hello-gridea</id>
        <link href="https://wyb20181.github.io//post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>